from flask import Flask, request, jsonify
import mysql.connector
import nltk
import random
from nltk.sentiment import SentimentIntensityAnalyzer
from textblob import TextBlob

# Inicializar Flask
app = Flask(__name__)

# Conectar a MySQL
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",  # Cambia esto si usas contraseÃ±a
    database="sentimentDB"
)
cursor = db.cursor()

# Descargar recursos de NLTK
nltk.download("vader_lexicon")
sia = SentimentIntensityAnalyzer()

# Variables de estado para recordar la conversaciÃ³n
if "ultimo_sentimiento" not in globals():
    ultimo_sentimiento = None
if "ultimo_mensaje" not in globals():
    ultimo_mensaje = None


def preprocesar_texto(texto):
    """
    1. Convierte a minÃºsculas
    2. Corrige errores ortogrÃ¡ficos
    """
    texto = texto.lower()  # Convertir a minÃºsculas
    texto = TextBlob(texto).correct()  # Corregir ortografÃ­a
    return str(texto)  # Convertir a string nuevamente


@app.route('/analizar', methods=['POST'])
def analizar_sentimiento():
    datos = request.json
    texto = datos.get("comentario", "")

    if not texto:
        return jsonify({"error": "No se recibiÃ³ comentario"}), 400

    # Preprocesar texto
    texto_procesado = preprocesar_texto(texto)

    # Analizar sentimiento
    resultado = sia.polarity_scores(texto_procesado)
    sentimiento = "positivo" if resultado['compound'] > 0 else "negativo" if resultado['compound'] < 0 else "neutral"

    # Guardar en la BD
    sql = "INSERT INTO comentarios (texto, sentimiento) VALUES (%s, %s)"
    cursor.execute(sql, (texto, sentimiento))
    db.commit()

    return jsonify({"comentario": texto, "texto_procesado": texto_procesado, "sentimiento": sentimiento})


@app.route('/chatbot', methods=['POST'])
def chatbot():
    global ultimo_sentimiento, ultimo_mensaje

    datos = request.json
    mensaje = datos.get("mensaje", "")

    if not mensaje:
        return jsonify({"respuesta": "No entendÃ­ lo que dijiste ðŸ¤–"}), 400

    # Preprocesar el texto
    mensaje_procesado = preprocesar_texto(mensaje)

    # Analizar sentimiento del mensaje
    resultado = sia.polarity_scores(mensaje_procesado)
    sentimiento = "positivo" if resultado['compound'] > 0 else "negativo" if resultado['compound'] < 0 else "neutral"

    # ðŸ“Œ Evitar respuestas repetitivas
    if mensaje == ultimo_mensaje:
        return jsonify({"mensaje": mensaje, "sentimiento": sentimiento, "respuesta": "Interesante... dime mÃ¡s sobre eso. ðŸ¤”"})

    # ðŸ“Œ Respuestas mÃ¡s naturales y variadas
    respuestas = {
        "positivo": [
            "Â¡Eso suena genial! ðŸ˜Š",
            "Â¡QuÃ© buena noticia! ðŸŽ‰ Â¿QuÃ© es lo que mÃ¡s te hace feliz en este momento?",
            "Â¡Me alegra escuchar eso! Â¿Hay algo especial que hayas hecho hoy?"
        ],
        "negativo": [
            "Oh, lo siento mucho. ðŸ˜” Â¿Quieres hablar sobre lo que te preocupa?",
            "A veces, compartir cÃ³mo te sientes puede ayudar. Â¿Hay algo en lo que pueda apoyarte?",
            "Recuerda que no estÃ¡s solo/a. ðŸ’™ Â¿Hay algo que puedas hacer para sentirte mejor?"
        ],
        "neutral": [
            "Entiendo. Â¿Tienes algo mÃ¡s en mente de lo que quieras hablar? ðŸ¤–",
            "Cada dÃ­a puede traernos cosas nuevas. Â¿Tienes algo en mente que te preocupe o emocione?",
            "Gracias por compartir eso. Â¿Hay algo mÃ¡s en lo que pueda ayudarte?"
        ]
    }

    # ðŸ“Œ Seleccionar una respuesta aleatoria
    respuesta_chatbot = random.choice(respuestas[sentimiento])

    # Guardar el Ãºltimo mensaje y sentimiento
    ultimo_sentimiento = sentimiento
    ultimo_mensaje = mensaje

    return jsonify({"mensaje": mensaje, "sentimiento": sentimiento, "respuesta": respuesta_chatbot})


if __name__ == '__main__':
    app.run(debug=True)
